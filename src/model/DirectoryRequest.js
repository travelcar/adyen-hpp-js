/**
 * Adyen HPP
 * Hosted Payment Pages
 *
 * OpenAPI spec version: 1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.AdyenHppJs) {
      root.AdyenHppJs = {};
    }
    root.AdyenHppJs.DirectoryRequest = factory(root.AdyenHppJs.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The DirectoryRequest model module.
   * @module model/DirectoryRequest
   * @version 1.1.0
   */

  /**
   * Constructs a new <code>DirectoryRequest</code>.
   * @alias module:model/DirectoryRequest
   * @class
   * @param currencyCode {String} The three-character ISO currency code.
   * @param merchantAccount {String} The merchant account identifier you want to process the (transaction) request with.
   * @param paymentAmount {Number} The payable amount that can be charged for the transaction, in minor units.
   * @param skinCode {String} A unique code to identify the skin you want to apply to the HPP to process the transaction.
   * @param merchantReference {String} A reference to uniquely identify the payment. This reference is used in all communication with you about the payment status. We recommend using a unique value per payment; however, it is not a requirement.
   * @param sessionValidity {Date} The payment deadline; the payment needs to occur within the specified time value. This is especially useful for tickets and reservations, where you want to hold items for sale for a short, limited period of time.
   * @param merchantSig {String} The signature in Base64 encoded format. The signature is generated by concatenating the values of a number of the payment session fields, and by computing the HMAC using the shared secret, as configured in the skin.
   */
  var exports = function(currencyCode, merchantAccount, paymentAmount, skinCode, merchantReference, sessionValidity, merchantSig) {
    var _this = this;

    _this['currencyCode'] = currencyCode;
    _this['merchantAccount'] = merchantAccount;
    _this['paymentAmount'] = paymentAmount;
    _this['skinCode'] = skinCode;
    _this['merchantReference'] = merchantReference;
    _this['sessionValidity'] = sessionValidity;
    _this['merchantSig'] = merchantSig;

  };

  /**
   * Constructs a <code>DirectoryRequest</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/DirectoryRequest} obj Optional instance to populate.
   * @return {module:model/DirectoryRequest} The populated <code>DirectoryRequest</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('currencyCode')) {
        obj['currencyCode'] = ApiClient.convertToType(data['currencyCode'], 'String');
      }
      if (data.hasOwnProperty('merchantAccount')) {
        obj['merchantAccount'] = ApiClient.convertToType(data['merchantAccount'], 'String');
      }
      if (data.hasOwnProperty('paymentAmount')) {
        obj['paymentAmount'] = ApiClient.convertToType(data['paymentAmount'], 'Number');
      }
      if (data.hasOwnProperty('skinCode')) {
        obj['skinCode'] = ApiClient.convertToType(data['skinCode'], 'String');
      }
      if (data.hasOwnProperty('merchantReference')) {
        obj['merchantReference'] = ApiClient.convertToType(data['merchantReference'], 'String');
      }
      if (data.hasOwnProperty('sessionValidity')) {
        obj['sessionValidity'] = ApiClient.convertToType(data['sessionValidity'], 'Date');
      }
      if (data.hasOwnProperty('merchantSig')) {
        obj['merchantSig'] = ApiClient.convertToType(data['merchantSig'], 'String');
      }
      if (data.hasOwnProperty('countryCode')) {
        obj['countryCode'] = ApiClient.convertToType(data['countryCode'], 'String');
      }
    }
    return obj;
  }

  /**
   * The three-character ISO currency code.
   * @member {String} currencyCode
   */
  exports.prototype['currencyCode'] = undefined;
  /**
   * The merchant account identifier you want to process the (transaction) request with.
   * @member {String} merchantAccount
   */
  exports.prototype['merchantAccount'] = undefined;
  /**
   * The payable amount that can be charged for the transaction, in minor units.
   * @member {Number} paymentAmount
   */
  exports.prototype['paymentAmount'] = undefined;
  /**
   * A unique code to identify the skin you want to apply to the HPP to process the transaction.
   * @member {String} skinCode
   */
  exports.prototype['skinCode'] = undefined;
  /**
   * A reference to uniquely identify the payment. This reference is used in all communication with you about the payment status. We recommend using a unique value per payment; however, it is not a requirement.
   * @member {String} merchantReference
   */
  exports.prototype['merchantReference'] = undefined;
  /**
   * The payment deadline; the payment needs to occur within the specified time value. This is especially useful for tickets and reservations, where you want to hold items for sale for a short, limited period of time.
   * @member {Date} sessionValidity
   */
  exports.prototype['sessionValidity'] = undefined;
  /**
   * The signature in Base64 encoded format. The signature is generated by concatenating the values of a number of the payment session fields, and by computing the HMAC using the shared secret, as configured in the skin.
   * @member {String} merchantSig
   */
  exports.prototype['merchantSig'] = undefined;
  /**
   * the two letter country code (ISO 3166-1)
   * @member {String} countryCode
   */
  exports.prototype['countryCode'] = undefined;


  /**
   * Returns The three-character ISO currency code.
   * @return {String}
   */
  exports.prototype.getCurrencyCode = function() {
    return this['currencyCode'];
  }

  /**
   * Sets The three-character ISO currency code.
   * @param {String} currencyCode The three-character ISO currency code.
   */
  exports.prototype.setCurrencyCode = function(currencyCode) {
    this['currencyCode'] = currencyCode;
  }


  /**
   * Returns The merchant account identifier you want to process the (transaction) request with.
   * @return {String}
   */
  exports.prototype.getMerchantAccount = function() {
    return this['merchantAccount'];
  }

  /**
   * Sets The merchant account identifier you want to process the (transaction) request with.
   * @param {String} merchantAccount The merchant account identifier you want to process the (transaction) request with.
   */
  exports.prototype.setMerchantAccount = function(merchantAccount) {
    this['merchantAccount'] = merchantAccount;
  }


  /**
   * Returns The payable amount that can be charged for the transaction, in minor units.
   * @return {Number}
   */
  exports.prototype.getPaymentAmount = function() {
    return this['paymentAmount'];
  }

  /**
   * Sets The payable amount that can be charged for the transaction, in minor units.
   * @param {Number} paymentAmount The payable amount that can be charged for the transaction, in minor units.
   */
  exports.prototype.setPaymentAmount = function(paymentAmount) {
    this['paymentAmount'] = paymentAmount;
  }


  /**
   * Returns A unique code to identify the skin you want to apply to the HPP to process the transaction.
   * @return {String}
   */
  exports.prototype.getSkinCode = function() {
    return this['skinCode'];
  }

  /**
   * Sets A unique code to identify the skin you want to apply to the HPP to process the transaction.
   * @param {String} skinCode A unique code to identify the skin you want to apply to the HPP to process the transaction.
   */
  exports.prototype.setSkinCode = function(skinCode) {
    this['skinCode'] = skinCode;
  }


  /**
   * Returns A reference to uniquely identify the payment. This reference is used in all communication with you about the payment status. We recommend using a unique value per payment; however, it is not a requirement.
   * @return {String}
   */
  exports.prototype.getMerchantReference = function() {
    return this['merchantReference'];
  }

  /**
   * Sets A reference to uniquely identify the payment. This reference is used in all communication with you about the payment status. We recommend using a unique value per payment; however, it is not a requirement.
   * @param {String} merchantReference A reference to uniquely identify the payment. This reference is used in all communication with you about the payment status. We recommend using a unique value per payment; however, it is not a requirement.
   */
  exports.prototype.setMerchantReference = function(merchantReference) {
    this['merchantReference'] = merchantReference;
  }


  /**
   * Returns The payment deadline; the payment needs to occur within the specified time value. This is especially useful for tickets and reservations, where you want to hold items for sale for a short, limited period of time.
   * @return {Date}
   */
  exports.prototype.getSessionValidity = function() {
    return this['sessionValidity'];
  }

  /**
   * Sets The payment deadline; the payment needs to occur within the specified time value. This is especially useful for tickets and reservations, where you want to hold items for sale for a short, limited period of time.
   * @param {Date} sessionValidity The payment deadline; the payment needs to occur within the specified time value. This is especially useful for tickets and reservations, where you want to hold items for sale for a short, limited period of time.
   */
  exports.prototype.setSessionValidity = function(sessionValidity) {
    this['sessionValidity'] = sessionValidity;
  }


  /**
   * Returns The signature in Base64 encoded format. The signature is generated by concatenating the values of a number of the payment session fields, and by computing the HMAC using the shared secret, as configured in the skin.
   * @return {String}
   */
  exports.prototype.getMerchantSig = function() {
    return this['merchantSig'];
  }

  /**
   * Sets The signature in Base64 encoded format. The signature is generated by concatenating the values of a number of the payment session fields, and by computing the HMAC using the shared secret, as configured in the skin.
   * @param {String} merchantSig The signature in Base64 encoded format. The signature is generated by concatenating the values of a number of the payment session fields, and by computing the HMAC using the shared secret, as configured in the skin.
   */
  exports.prototype.setMerchantSig = function(merchantSig) {
    this['merchantSig'] = merchantSig;
  }


  /**
   * Returns the two letter country code (ISO 3166-1)
   * @return {String}
   */
  exports.prototype.getCountryCode = function() {
    return this['countryCode'];
  }

  /**
   * Sets the two letter country code (ISO 3166-1)
   * @param {String} countryCode the two letter country code (ISO 3166-1)
   */
  exports.prototype.setCountryCode = function(countryCode) {
    this['countryCode'] = countryCode;
  }



  return exports;
}));


